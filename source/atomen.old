!--------------------------------------------------------
! compute atomic energy increments/corrections and Enuc
!--------------------------------------------------------

subroutine atomen(pr,n,nao,nel,at,z,cn,rab,p1,wbo1,enuc,exc,ewbo,ecoula)
      use bascom
      use parcom
      use com
      implicit none
      logical pr
      integer n,nao,nel
      integer,intent(in)     :: at(n)       
      real*8, intent(in)     :: z(n)
      real*8, intent(in)     :: cn(n)                     !CN
      real*8, intent(in)     :: rab(n*(n+1)/2) 
      real*8, intent(in)     :: p1(n)                     ! atom populations, gtb    
      real*8, intent(in)     :: wbo1(n,n)                 ! WBO, gtb    
      real*8, intent(out)    :: enuc                      ! Enuc           
      real*8, intent(out)    :: exc                       ! atomic EXC/core/whatever correction
      real*8, intent(out)    :: ewbo                      ! WBO term
      real*8, intent(out)    :: ecoula                    ! Coulomb atoms

      integer i,j,k,l,lin,ati,atj,ia,ib
      real*8 zi,zj,zij,damp,r0i,r0j,r0ab,bo,ff,t1,t2,r,rco
      real*8 e1,e2,e3,qi,qj,glob10,glob9,glob6,glob7

!     real*8 bcn(n)
!     call prmat(6,wbo1,n,n,'wbo')
!     do i = 1, n
!        bcn(i)=sum(wbo1(1:n,i))
!        write(*,'(i3,3f12.3)') at(i),bcn(i),cn(i),(3./4.)*bcn(i)/(cn(i)+1.d-3)
!     enddo

!     WBO (electronic) term
      e3 = 0
      do i = 2, n
        qi  = ener_par1(5,at(i))  !*(1d0+ener_par1(7,at(i))*cn(i))
        zi  = ener_par1(6,at(i))
        do j = 1, i-1 
         qj  = ener_par1(5,at(j)) !*(1d0+ener_par1(7,at(j))*cn(j))
         zj  = ener_par1(6,at(j))
         ff  = ((qi-qj)/(qi+qj))**2
         t1  = 0.5d0*(qi+qj) - 4d-6*ff
         t2  = sqrt(zi*zj)
         r   = rab(lin(i,j))
!        rco = glob_par(6)*(4./3.)*(rcov(at(i))+rcov(at(j)))
!        damp= 0.5d0*(1d0-erf(7.5d0*(r-rco)/rco))
         e3  = e3 + t1 * wbo1(j,i) * (1d0 - t2/r)
!        if(wbo1(j,i).gt.0.2) write(*,*) at(i),at(j),wbo1(j,i),wbo1(j,i) * (1d0 - t2/rab(lin(i,j)))
        enddo
      enddo

      ewbo = e3

!     higher order q terms (electrostatic) and (neutral) atom increment
      e1 = 0 
      e2 = 0 
      do i=1,n
         ati = at(i)
         qi  = z(i)-p1(i)
         ff  = (p1(i) / z(i))**0.5d0    ! atom specific energy increment normalization factor (makes E(H+)=0)
         e1 = e1 + ff* ener_par1(1,ati)                                                   ! free atom
         e2 = e2 + ff*(ener_par1(2,ati)*qi+ener_par1(3,ati)*qi**2+ener_par1(4,ati)*qi**3) ! + higher-order terms in q 
      enddo

      exc    = e1 
      ecoula = e2 

!     nuclear repulsion, SR = damped Z*Z/R
!     includes charge as well as WBO information for fine tuning
      glob10=glob_par(16)       ! wbo dep
      glob9 =glob_par(15)       ! charge dep
      glob6 =glob_par(13)       ! wbo dep
      k=0
      enuc=0
      do i=1,n
         ati=at(i)
         qi = z(i)-p1(i)
         zi = ener_par2(1,ati)*(1d0+ener_par2(3,ati)*cn(i))
         r0i= ener_par2(2,ati)*(1d0+glob9*qi)+ener_par2(4,ati)*cn(i)   ! effective radius
         do j=1,i-1
            k   = k + 1
            bo  = wbo1(j,i)
            atj = at(j)
            qj  = z(j)-p1(j)
            zj  = ener_par2(1,atj)*(1d0+ener_par2(3,atj)*cn(j))
            r0j = ener_par2(2,atj)*(1d0+glob9*qj)+ener_par2(4,atj)*cn(j)
            r0ab= (r0i + r0j)*(1d0+qi*qj*glob9)*(1d0+glob10*bo)     ! effective pair distance = damping rate
            damp= erf(-r0ab*rab(k))+1d0
            zij = zi * zj * (1d0+glob6*bo)
            enuc= enuc + damp*zij/rab(k)
         enddo
         k = k +1
      enddo

      if(pr)then
      write(*,'(''atomic EXC/core   : '',f12.5)') e1
      write(*,'(''atomic Coulomb    : '',f12.5)') e2
      write(*,'(''electronic WBO    : '',f12.5)') e3
      endif

      end
