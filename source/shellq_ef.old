!! ------------------------------------------------------------------------
! electric field perturbed version for beta
!! ------------------------------------------------------------------------

subroutine shellq_ef(pr,prop,n,ndim,nel,nopen,homo,at,chrg,xyz,z,rab, & 
&                    pnt,norm,S,D,efield,psh,pa,gapa,P,H,Hdiag,alp)
   use iso_fortran_env, only : wp => real64
   use parcom
   use bascom
   use com
   implicit none

!! ------------------------------------------------------------------------
!  Input
!! ------------------------------------------------------------------------
   logical, intent(in)    :: pr                 ! print
   integer, intent(in)    :: prop               ! type of property calc (not used)
   integer, intent(in)    :: n                  ! number of atoms 
   integer, intent(in)    :: ndim               ! number of AOs       
   integer, intent(in)    :: nel                ! number of electrons 
   integer, intent(in)    :: nopen              ! number of open shells
   integer, intent(in)    :: homo               ! as the name says...
   integer, intent(in)    :: at(n)              ! ordinal number of atoms
   real(wp),intent(in)    :: chrg               ! system charge           
   real(wp),intent(in)    :: xyz(3,n)           ! coordinates (not used)
   real(wp),intent(in)    :: z(n)               ! nuclear charges          
   real(wp),intent(in)    :: rab(n*(n+1)/2)     ! distances  
   real(wp),intent(in)    :: pnt(3)             ! property reference point
   real(wp),intent(in)    :: norm(ndim)         ! SAO normalization factors
   real(wp),intent(in)    :: S(ndim*(ndim+1)/2) ! exact overlap maxtrix in SAO
   real(wp),intent(in)    :: D(ndim*(ndim+1)/2,3)!dipole integrals
   real(wp),intent(in)    :: efield(3)          ! electric field
   real(wp),intent(in)    :: Hdiag(ndim)        ! H0 diag         
   real(wp),intent(in)    :: psh(10,n)          ! unperturbed shell populations 
   real(wp),intent(in)    :: pa(n)              ! unperturbed atom      "
   real(wp),intent(in)    :: gapa(n)            ! unperturbed atom gaps  
   real(wp),intent(in)    :: P(ndim*(ndim+1)/2) ! unpertrubed density matrix
   real(wp),intent(in)    :: H(ndim*(ndim+1)/2) ! unperturbed Hamilton Matrix
!! ------------------------------------------------------------------------
!  Output
!! ------------------------------------------------------------------------
   real(wp),intent(out)   :: alp(6)             ! dipole polarizability tensor

!! ------------------------------------------------------------------------
!  local
!! ------------------------------------------------------------------------
   real(wp),allocatable :: eps(:)               ! eigenvalues
   real(wp),allocatable :: focc(:)              ! occupations
   real(wp),allocatable :: xnrm(:)              ! 
   real(wp),allocatable :: pP   (:)             ! perturbed P     
   real(wp),allocatable :: pH   (:)             ! perturbed H     
   real(wp),allocatable :: Htmp (:)             !
   real(wp)             :: dip1(3),dip2(3)
   real(wp)             :: alpha(3,3)         

   real(wp),parameter   :: eT     = 300.00_wp   ! electronic temp. 

   integer  :: i,j,k,l,ish,ati,atj,ia,ib,jsh,ii,jj,lin,ij
   real(wp) :: scal(10,n), xk, eh1, hi, hj, pol
   logical fail

!! ------------------------------------------------------------------------
!  initizialization
!! ------------------------------------------------------------------------

   allocate(focc(ndim), eps(ndim), pH(ndim*(ndim+1)/2), pP(ndim*(ndim+1)/2), &
  &         Htmp(ndim*(ndim+1)/2), xnrm(ndim), source = 0.0_wp )

   pH = H
   do j=1,3
      pH(:)=pH(:)-efield(j)*D(:,j)  ! the field perturbation on unperturbed H
   enddo

! response correction
     call responscal(n,at,z,pa,scal)            ! determine scaling factors for atoms
     call modbasd(n,at,scal)                    ! scale exponents shell-wise
     call sint(n,ndim,at,xyz,rab,Htmp,xnrm)     ! norm

!! ------------------------------------------------------------------------
!  field perturbation on ES perturbed H
!! ------------------------------------------------------------------------

   xk  = 0.0001_wp  ! finite field step
   do k=1,3
      write(*,'(''Efield, dir :'',3f8.5,i4)')efield,k
      call addsym(ndim, xk,pH,D(1,k),Htmp) ! perturb H
      call solve (ndim,nel,nopen,homo,eT,focc,Htmp,S,pP,eps,eh1,fail) ! solve
      call dipmom2(n,ndim,xyz,z,norm,pP,D,pnt,dip1) ! get new dipole moment
      call addsym(ndim,-xk,pH,D(1,k),Htmp) ! other direction
      call solve (ndim,nel,nopen,homo,eT,focc,Htmp,S,pP,eps,eh1,fail)
      call dipmom2(n,ndim,xyz,z,norm,pP,D,pnt,dip2)
      alpha(k,1:3)=-(dip1(1:3)-dip2(1:3))/(2_wp*xk) ! numerical diff. dmu/dfield
   enddo
   alp(1)=alpha(1,1)
   alp(2)=0.5*(alpha(2,1)+alpha(1,2))
   alp(3)=alpha(2,2)
   alp(4)=0.5*(alpha(3,1)+alpha(1,3))
   alp(5)=0.5*(alpha(3,2)+alpha(2,3))
   alp(6)=alpha(3,3)

end

