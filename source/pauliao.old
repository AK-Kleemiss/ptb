!! ------------------------------------------------------------------------
!  add Pauli Term to H in second iter
!! ------------------------------------------------------------------------

subroutine calcpauli2ao(n,nao,nsh,at,scal,pao,S,Hdiag,Hmat)
      use  bascom
      use  parcom
      implicit none          
      integer, intent(in)   :: nsh,nao,n,at(n)
      real*8,  intent(in)   :: scal
      real*8,  intent(in)   :: pao(nao)
      real*8,  intent(in)   :: S(nao*(nao+1)/2)    
      real*8,  intent(in)   :: Hdiag(nao)    
      real*8,  intent(inout):: Hmat(nao*(nao+1)/2)    

      integer i,j,k,l,m,atk,jsh,llao2(0:3)
      data llao2/1,3,5,7 /
      real*8 f1
      real*8,allocatable :: stmp(:,:), sdum(:,:), xtmp(:,:)

      allocate(stmp(nao,nao),sdum(nao,nao),xtmp(nao,nao))
      call blowsym(nao,S,sdum)

!     N^2 step
      do i=1,nao                          
         m=0 
         do k=1,n       
            atk=at(k)
            f1=shell_cnf3( 9,atk)           ! element scaling
            do jsh=1,bas_nsh(atk)           ! shells of atom nn
               l =llao2(bas_lsh(jsh,atk))
               do l=1,l                     ! AOs of shell jsh
                  m = m + 1
                  stmp(m,i)= Hdiag(m) * sdum(m,i) * pao(m) * f1
               enddo
            enddo
         enddo
      enddo

!     N^3 step
      call DGEMM('N','N',nao,nao,nao,1.0d0,sdum,nao,stmp,nao,0.0d0,xtmp,nao)

      k = 0 
      do i=1, nao 
         do j=1, i-1
            k = k + 1 
            Hmat(k) = Hmat(k) + xtmp(j,i)                         
         enddo
         k = k + 1 
         Hmat(k) = Hmat(k) + xtmp(i,i) * scal
      enddo

      end

